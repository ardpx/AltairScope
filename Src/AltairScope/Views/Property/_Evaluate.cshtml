@model AltairScope.Models.ViewablePropertyViewModel

@{
	bool useFixedVacancyRate = false;
	if (Model.VacancySubsequentYear == 0.0833m)
	{
		useFixedVacancyRate = true;
	}
}

@if(Model.ReturnRate_Mean != null)
{
	<div class="editor-label">
		@Html.LabelFor(model => model.InitialCash)
	</div>
	<div class="editor-field">
		@Html.DisplayFor(model => model.InitialCash)
	</div>
	
	<div class="editor-label">
		@Html.LabelFor(model => model.EstimatedAppreciationRate)
	</div>
	<div class="editor-field">
		@Html.DisplayFor(model => model.EstimatedAppreciationRate)
	</div>
	
	<div class="editor-label">
		@Html.LabelFor(model => model.VacancyFirstYear)
	</div>
	<div class="editor-field">
		@Html.DisplayFor(model => model.VacancyFirstYear)
	</div>
	
	<div class="editor-label">
		@Html.LabelFor(model => model.VacancySubsequentYear)
	</div>
	<div class="editor-field">
		@Html.DisplayFor(model => model.VacancySubsequentYear)
	</div>
	
	<div class="editor-label">
		@Html.LabelFor(model => model.Score)
	</div>
	<div class="editor-field">
		@Html.DisplayFor(model => model.Score)
	</div>

	<div class="editor-label">
		@Html.LabelFor(model => model.ReturnRate_Mean)
	</div>
	<div class="editor-field">
		@Html.DisplayFor(model => model.ReturnRate_Mean)
	</div>

	<div class="editor-label">
		@Html.LabelFor(model => model.CashFlow_Mean)
	</div>
	<div class="editor-field">
		@Html.DisplayFor(model => model.CashFlow_Mean)
	</div>
	
	<div class="editor-label">
		@Html.LabelFor(model => model.MortgageMonthly)
	</div>
	<div class="editor-field">
		@Html.DisplayFor(model => model.MortgageMonthly)
	</div>

	<div class="editor-label">
		<label>10y Return Rates</label>
	</div>
	<div class="editor-field">
		<table>
			<th>
				@for (int i = 1; i <= 10; i++)
				{
					<td>@string.Format("y{0}", i)</td>
				}
			</th>
			<tr>
				<td>Return%</td>
				@foreach (var rr in Model.ReturnRateList)
				{
					<td>@string.Format("{0:0.00%}", rr)</td>
				}
			</tr>
			<tr>
				<td>Cashflow</td>
				@foreach (var cf in Model.CashFlowList)
				{
					<td>@string.Format("{0:C0}", cf)</td>
				}
			</tr>
		</table>
	</div>
}
		-------------------------------------------------------------
@using (Ajax.BeginForm("Evaluate", "Property", new AjaxOptions { UpdateTargetId = "evaluationResult", InsertionMode = InsertionMode.Replace, HttpMethod = "POST" }))
  {
			@Html.AntiForgeryToken()
			@Html.ValidationSummary(true)

			 @Html.HiddenFor(model => model.Id)

		<div class="editor-label">
            @Html.LabelFor(model => model.EvaluatePrice)
		</div>
		<div class="editor-field">
			@Html.EditorFor(model => model.EvaluatePrice)
			@Html.ValidationMessageFor(model => model.EvaluatePrice)  @string.Format("{0}", Model.Price)
		</div>
	  
		<div class="editor-label">
            @Html.LabelFor(model => model.EvaluateRental)
		</div>
		<div class="editor-field">
			@Html.EditorFor(model => model.EvaluateRental)
			@Html.ValidationMessageFor(model => model.EvaluateRental)  @string.Format("{0}", Model.EvaluateRental * 0.5)
		</div> 
	
		<div class="editor-label">
            @Html.LabelFor(model => model.EvaluateLoanRate)
		</div>
		<div class="editor-field">
			@Html.EditorFor(model => model.EvaluateLoanRate)
			@Html.ValidationMessageFor(model => model.EvaluateLoanRate)
		</div> 
	
		<div class="editor-label">
            <label for="FixedVacancy">Fixed Vacancy Ratio</label>
		</div>
		<div class="editor-field">
			<select id="FixedVacancy" name="FixedVacancy" data-val="true">
				<option value="true" @( useFixedVacancyRate ? "selected =\"selected\"" : "")>Yes</option>
				<option value="false" @( !useFixedVacancyRate ? "selected =\"selected\"" : "")>No</option>
			</select>
		</div>
	  
			<p>
				
				<input type="submit" value="Evaluate" />
			</p>
  }